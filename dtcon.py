# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# dtcon.py 
#Made by Toby Zhang A00987765
# Created on: 2017-01-16 13:55:14.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: mod2 <sewers> <Field_Name> <Field_Type> <sewers_Copy>
# Description: This script does the following in the ordered number:
#1) Accepts user inputs
#2) Creates a copy of the input and adds a date field. If there is an existing copy, it will be overwritten.
#3) Checks for the diameter of the pipes. If the diameter is 60, the date field will be filled with the current date. If the diameter is 45, the date field will be filled with the date 10 days from now.
#4) Tells the user the diameter field was found for each diameter option (45 or 60).
#5) Outputs the copied dataset
# ---------------------------------------------------------------------------

# Import arcpy module

import arcpy
import sys
import os
import datetime
import time

# Script arguments
arcpy.env.overwriteOutput = True
try:
    sewers = arcpy.GetParameterAsText(0)
	#if sewers == '#' or not sewers:
	#    sewers = "H:\\var\\gist\\8138\\mod02\\data.gdb\\sewers" # provide a default value if unspecified
except Exception:
	arcpy.AddError("FILE NOT FOUND")

sewers_copy = arcpy.GetParameterAsText(1)
#if sewers_Copy__2_ == '#' or not sewers_Copy__2_:
#    sewers_Copy__2_ = "H:\\var\\gist\\8138\\mod02\\data.gdb\\sewers_Copy" # provide a default value if unspecified


Field_Name = arcpy.GetParameterAsText(2)
#if Field_Name == '#' or not Field_Name:
#    Field_Name = "UpdateDate" # provide a default value if unspecified

Field_Type = arcpy.GetParameterAsText(3)
#if Field_Type == '#' or not Field_Type:
#    Field_Type = "DATE" # provide a default value if unspecified


# Local variables:
s_copy = sewers_copy +"_copy"
r_c = s_copy

# Process: Copy
try:

	arcpy.Copy_management(sewers, s_copy, "FeatureClass")
	
except arcpy.ExecuteError:
	arcpy.AddWarning("File: "+s_copy+" already exists! Overwriting now!"+datetime.datetime.today().strftime("%B %d, %Y") )
	if arcpy.Exists(s_copy):
		arcpy.Delete_management(s_copy)
		arcpy.Copy_management(sewers, s_copy, "FeatureClass")
		

# Process: Add Field

try:
	arcpy.AddField_management(s_copy, Field_Name, Field_Type, "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
	#rows = arcpy.UpdateCursor(sewers, "DIAMETER = 60")
	#Gives date it is running.
	arcpy.AddWarning(str(datetime.datetime.today().strftime("%B %d, %Y")))
	
	#http://gis.stackexchange.com/questions/116492/calculating-date-field-with-todays-date-from-datetime-date-today
	#accesses the data and updates the date field. Method obtained from link above
	with arcpy.da.UpdateCursor(r_c, [Field_Name], "DIAMETER = 60") as rows:
		arcpy.AddMessage("Diameter is 60m exists")
		for row in rows:
			rows.updateRow([datetime.date.today()])
	
	with arcpy.da.UpdateCursor(r_c, [Field_Name], "DIAMETER = 45") as rows:
		arcpy.AddMessage("Diameter is 45m exists")
		for row in rows:
			rows.updateRow([datetime.date.today()+datetime.timedelta(days=10)])
			
	
	#DEPRECIATED
	#for row in rows:
		#row.DATE = datetime.datetime.today().strftime("%B %d, %Y")
		#row.setValue(Field_Name, datetime.date.today())
		#rows.updateRow(row)
		
	
#error for the update code block		
except arcpy.ExecuteError:
	e = "Fatal non-ESRI based error"
	print e
	arcpy.AddWarning(e)
	print datetime.datetime.now()
	arcpy.AddWarning(datetime.datetime.now())


